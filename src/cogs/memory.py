# src/cogs/memory.py\n\nimport discord\nfrom discord.ext import commands\nimport logging\nimport json\n\ndef setup(bot):\n    # Get the database manager from the bot\n    db_manager = bot.db_manager\n    logger = logging.getLogger(__name__)\n    logger.info(\"Setting up memory commands\")\n    \n    @bot.slash_command(name=\"memory\", description=\"Get or clear memory information about a user\")\n    async def memory(ctx: discord.ApplicationContext,\n                     user: discord.Option(discord.User, \"User to get memory for\"),\n                     clear: discord.Option(bool, \"Clear user's memory\", required=False, default=False)):\n        \"\"\"Get memory information about a specific user, optionally clearing it\"\"\"\n        # Log the command execution\n        logger.info(f\"Memory command executed by {ctx.author} in guild {ctx.guild.id if ctx.guild else 'DM'} for user {user.id}\")\n        \n        # Handle clear option\n        if clear:\n            # Check if the user has permission to manage the guild before clearing\n            if not ctx.author.guild_permissions.manage_guild:\n                logger.warning(f\"User {ctx.author} attempted to clear memory without permission\")\n                await ctx.respond(\"You need 'Manage Server' permissions to clear user memory.\", ephemeral=True)\n                return\n                \n            # Confirm with the user before clearing memory\n            confirm_view = ConfirmClearView(ctx.author, user, db_manager)\n            await ctx.respond(f\"Are you sure you want to clear all memory for {user.name}? This action cannot be undone.\", \n                              view=confirm_view, ephemeral=False)\n            return\n        \n        # Get user memory from database\n        user_id = str(user.id)\n        try:\n            user_memory = await db_manager.get_user_memory(user_id)\n        except Exception as e:\n            logger.error(f\"Error retrieving memory for user {user_id}: {e}\")\n            await ctx.respond(\"Error retrieving user memory.\", ephemeral=True)\n            return\n        \n        # Parse the memory data\n        try:\n            known_facts = json.loads(user_memory.get(\"known_facts\", \"{}\"))\n            interaction_history = json.loads(user_memory.get(\"interaction_history\", \"[]\"))\n        except json.JSONDecodeError as e:\n            logger.error(f\"Error parsing memory data for user {user_id}: {e}\")\n            await ctx.respond(\"Error parsing user memory data.\", ephemeral=True)\n            return\n        \n        # Create an embed to display the memory information\n        embed = discord.Embed(\n            title=f\"Memory for {user.name}\",\n            description=f\"User ID: {user.id}\",\n            color=discord.Color.blue()\n        )\n        \n        # Add known facts if any\n        if known_facts and isinstance(known_facts, dict) and known_facts:\n            facts_text = \"\\n\".join([f\"â€¢ {key}: {value}\" for key, value in known_facts.items()])\n            embed.add_field(name=\"Known Facts\", value=facts_text[:1024], inline=False)\n        else:\n            embed.add_field(name=\"Known Facts\", value=\"No known facts recorded.\", inline=False)\n        \n        # Add interaction history summary\n        if interaction_history and isinstance(interaction_history, list) and interaction_history:\n            # Count interactions\n            interaction_count = len(interaction_history)\n            # Get the most recent interaction if available\n            recent_interaction = interaction_history[-1] if interaction_history else None\n            \n            history_summary = f\"Total interactions: {interaction_count}\"\n            if recent_interaction:\n                timestamp = recent_interaction.get(\"timestamp\", \"Unknown\")\n                history_summary += f\"\\nLast interaction: {timestamp}\"\n            \n            embed.add_field(name=\"Interaction History\", value=history_summary, inline=False)\n            \n            # Add a sample of recent interactions (last 3)\n            recent_interactions_text = \"\"\n            for i, interaction in enumerate(interaction_history[-3:]):\n                user_msg = interaction.get(\"user_message\", \"N/A\")\n                ai_resp = interaction.get(\"ai_response\", \"N/A\")\n                timestamp = interaction.get(\"timestamp\", \"N/A\")\n                \n                # Truncate long messages\n                if len(user_msg) > 100:\n                    user_msg = user_msg[:100] + \"...\"\n                if len(ai_resp) > 100:\n                    ai_resp = ai_resp[:100] + \"...\"\n                \n                recent_interactions_text += f\"**Interaction {interaction_count-2+i}**\\n\"\n                recent_interactions_text += f\"User: {user_msg}\\n\"\n                recent_interactions_text += f\"AI: {ai_resp}\\n\"\n                recent_interactions_text += f\"Time: {timestamp}\\n\\n\"\n            \n            if recent_interactions_text:\n                embed.add_field(name=\"Recent Interactions\", value=recent_interactions_text[:1024], inline=False)\n        else:\n            embed.add_field(name=\"Interaction History\", value=\"No interaction history recorded.\", inline=False)\n        \n        await ctx.respond(embed=embed)\n    \n    logger.info(\"Memory commands setup completed\")\n\nclass ConfirmClearView(discord.ui.View):\n    def __init__(self, command_user, target_user, db_manager):\n        super().__init__(timeout=60)\n        self.command_user = command_user\n        self.target_user = target_user\n        self.db_manager = db_manager\n    \n    @discord.ui.button(label=\"Confirm\", style=discord.ButtonStyle.danger)\n    async def confirm(self, button: discord.ui.Button, interaction: discord.Interaction):\n        # Check if the interaction is from the user who initiated the command\n        if interaction.user != self.command_user:\n            await interaction.response.send_message(\"You cannot confirm this action.\", ephemeral=True)\n            return\n            \n        # Clear the user's memory\n        try:\n            user_id = str(self.target_user.id)\n            await self.db_manager.clear_user_memory(user_id)\n            await interaction.response.send_message(f\"Successfully cleared memory for {self.target_user.name}.\", ephemeral=False)\n        except Exception as e:\n            logger = logging.getLogger(__name__)\n            logger.error(f\"Error clearing memory for user {user_id}: {e}\")\n            await interaction.response.send_message(\"Error clearing user memory\", ephemeral=False)\n        \n        # Disable the buttons after use\n        self.stop()\n        for child in self.children:\n            child.disabled = True\n        await interaction.message.edit(view=self)\n    \n    @discord.ui.button(label=\"Cancel\", style=discord.ButtonStyle.secondary)\n    async def cancel(self, button: discord.ui.Button, interaction: discord.Interaction):\n        # Check if the interaction is from the user who initiated the command\n        if interaction.user != self.command_user:\n            await interaction.response.send_message(\"You cannot cancel this action.\", ephemeral=True)\n            return\n            \n        await interaction.response.send_message(\"Memory clear operation cancelled.\", ephemeral=False)\n        \n        # Disable the buttons after use\n        self.stop()\n        for child in self.children:\n            child.disabled = True\n        await interaction.message.edit(view=self)